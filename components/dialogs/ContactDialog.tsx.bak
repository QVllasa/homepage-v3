// Diese Datei wurde als Backup gespeichert, da das Kontaktformular nicht mehr verwendet wird
// Die Website verwendet jetzt nur noch das einfache E-Mail-Eingabefeld in der HeaderSection und ContactSection

import {ForwardedRef, forwardRef, useImperativeHandle, useState} from 'react'
import {addDoc, collection, getFirestore} from "firebase/firestore";
import {useFirebaseApp} from "reactfire";
import {TailSpin} from "react-loader-spinner";
import {FieldValues, useForm} from "react-hook-form";
import {useTranslation} from 'next-i18next';

// Import Shadcn UI components
import {Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle} from "../../components/ui/dialog";
import {Button} from "../../components/ui/button";
import {Input} from "../../components/ui/input";
import {Label} from "../../components/ui/label";
import {Textarea} from "../../components/ui/textarea";

export const ContactDialog = forwardRef(function ContactDialog(props: any, ref: ForwardedRef<any>) {
    const [open, setOpen] = useState(false);
    const [isSubmitted, setSubmitted] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const app = useFirebaseApp();
    const firestore = getFirestore(app);
    const {register, handleSubmit, formState: {errors}} = useForm();
    const {t} = useTranslation('common');

    const onSubmit = async (data: FieldValues) => {
        setIsLoading(true);
        addDoc(collection(firestore, "mail"), {
            to: ['qendrim.vllasa@gmail.com'],
            message: {
                subject: `Hello from ${data.name}`,
                text: `Email from: ${data.email}
                ${data.message}`,
            }
        }).then(() => {
            setIsLoading(false);
            setSubmitted(true);
        }).catch((err) => {
            console.error(err);
        });
    };

    const openDialog = () => {
        setSubmitted(false);
        setOpen(true);
    }

    useImperativeHandle(ref, () => ({open: openDialog}), []);

    const handleClose = () => {
        if (!isLoading) {
            setOpen(false);
        }
    }

    return (
        <Dialog open={open} onOpenChange={handleClose}>
            <DialogContent className="sm:max-w-[425px]">
                <DialogHeader>
                    <DialogTitle>{t('contact.contactUs')}</DialogTitle>
                    <DialogDescription>
                        {t('contact.formDescription')}
                    </DialogDescription>
                </DialogHeader>
                {
                    isSubmitted ? (
                        <div className="space-y-4 py-4 text-center">
                            <h3 className="text-2xl font-semibold text-green-600 dark:text-green-400">{t('contact.thankYou')}</h3>
                            <p>{t('contact.formDescription')}</p>
                            <Button onClick={handleClose}>
                                {t('contact.close')}
                            </Button>
                        </div>
                    ) : (
                        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                            <div className="space-y-2">
                                <Label htmlFor="name">{t('contact.name')}</Label>
                                <Input
                                    {...register("name", {
                                        required: {
                                            value: true,
                                            message: t('contact.nameRequired')
                                        }
                                    })}
                                    id="name"
                                    placeholder={t('contact.yourName')}
                                />
                                {errors.name && <span className="text-sm text-red-500">{errors.name.message as string}</span>}
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="email">{t('contact.email')}</Label>
                                <Input
                                    {...register("email", {
                                        required: {
                                            value: true,
                                            message: t('contact.validEmailRequired')
                                        },
                                        pattern: {
                                            value: /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/,
                                            message: t('contact.validEmailRequired')
                                        }
                                    })}
                                    type="email"
                                    id="email"
                                    placeholder={t('contact.yourEmail')}
                                />
                                {errors.email && <span className="text-sm text-red-500">{errors.email.message as string}</span>}
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="message">{t('contact.message')}</Label>
                                <Textarea
                                    {...register("message", {
                                        required: {
                                            value: true,
                                            message: t('contact.messageRequired')
                                        }
                                    })}
                                    id="message"
                                    placeholder={t('contact.yourMessage')}
                                />
                                {errors.message && <span className="text-sm text-red-500">{errors.message.message as string}</span>}
                            </div>

                            <DialogFooter>
                                <Button disabled={isLoading} type="submit" className="w-full">
                                    {isLoading ? (
                                        <TailSpin
                                            height="20"
                                            width="20"
                                            color="#fff"
                                            ariaLabel="loading"
                                            wrapperClass="text-center mx-auto"
                                        />
                                    ) : (
                                        t('contact.sendButton')
                                    )}
                                </Button>
                            </DialogFooter>
                        </form>
                    )
                }
            </DialogContent>
        </Dialog>
    );
});
